//*********************************************************************************************************************
//
// File: Player.cpp
//
// Description:
//    TODO: Add description.
//
//*********************************************************************************************************************

#include "Player.h"
#include "PlayerStates/RegularState.h"

namespace FerretGame
{
//*********************************************************************************************************************
// Public Methods - Start
//*********************************************************************************************************************

   //******************************************************************************************************************
   //
   // Method: Player
   //
   // Description:
   //    TODO: Add Description.
   //
   // Arguments:
   //    apEngine = Pointer to the engine.
   //
   // Return:
   //    N/A
   //
   //******************************************************************************************************************
   Player::Player(Bebop::Bebop* apEngine) :
      mpEngine(apEngine)
   {
      mpFerret = new Ferret(Bebop::Math::Vector2D<float>(0.0F, 0.0F));
      mpPlayerState = new RegularState(this, mpEngine);
   }
   
   //******************************************************************************************************************
   //
   // Method: ~Player
   //
   // Description:
   //    TODO: Add description.
   //    
   // Arguments:
   //    N/A
   //
   // Return:
   //    N/A
   //
   //******************************************************************************************************************
   Player::~Player()
   {
      delete mpFerret;
      delete mpPlayerState;
   }

   //******************************************************************************************************************
   //
   // Method: ChangeState
   //
   // Description:
   //    Change the characters state the the passed in state, deleting the old state in the process.
   //
   // Arguments:
   //    apNewState - Pointer to the new player state.
   //
   // Return:
   //    N/A
   //
   //******************************************************************************************************************
   void Player::ChangeState(PlayerState* apNewState)
   {
      delete mpPlayerState;
      mpPlayerState = apNewState;
   }

   //******************************************************************************************************************
   //
   // Method: GetFerret
   //
   // Description:
   //    Retrieves pointer to the player's ferret object.
   //
   // Arguments:
   //    N/A
   //
   // Return:
   //    Return pointer to the player's ferret object.
   //
   //******************************************************************************************************************
   Ferret* Player::GetFerret()
   {
      return mpFerret;
   }

   //******************************************************************************************************************
   //
   // Method: Update
   //
   // Description:
   //    Updates the player based on their state.
   //
   // Arguments:
   //    N/A
   //
   // Return:
   //    N/A
   //
   //******************************************************************************************************************
   void Player::Update()
   {
      mpPlayerState->Update();
   }

//*********************************************************************************************************************
// Public Methods - End
//*********************************************************************************************************************

//*********************************************************************************************************************
// Protected Methods - Start
//*********************************************************************************************************************

   // There are currently no protected methods for this class.

//*********************************************************************************************************************
// Protected Methods - End
//*********************************************************************************************************************

//*********************************************************************************************************************
// Private Methods - Start
//*********************************************************************************************************************

   // There are currently no private methods for this class.

//*********************************************************************************************************************
// Private Methods - End
//*********************************************************************************************************************
}